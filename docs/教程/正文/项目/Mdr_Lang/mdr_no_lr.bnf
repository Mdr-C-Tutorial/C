program ::= [func | use | decl]* main [func | use | decl]*

use ::= "use" id

main ::= "function" "main" "()" "->" "()" "{" stmts "}"

func ::= "function" gen_list type_ id "(" param_list ")" "->" type_or_unit "{" stmts "}"

gen_list ::= "<" param_list ">"

type_ ::= type "." | epsilon

type_or_unit ::= type | "()"

type ::= "i8" | "i16" | "i32" | "i64" | "u8" | "u16" | "u32" | "u64" | "f32" | "f64" | "bool" | "char" | id | array_type | tuple_type

array_type ::= "[" type (":" digits)? "]"

tuple_type ::= "(" type_list ")"

type_list ::= type ("," type)*

param_list ::= param ("," param)* | epsilon

param ::= id (":" type)?

decl ::= ["let" | "const"] param ("=" bool)? ";" | "struct" id "(" param_list ")" ";"

bool ::= join bool_
bool_ ::= "||" join bool_ | epsilon

join ::= eq join_
join_ ::= "&&" eq join_ | epsilon

eq ::= rel eq_
eq_ ::= "==" rel eq_ | "!=" rel eq_ | ">=" rel eq_ | "<=" rel eq_ | ">" rel eq_ | "<" rel eq_ | epsilon

rel ::= term rel_
rel_ ::= "+" term rel_ | "-" term rel_ | epsilon

term ::= unary term_
term_ ::= "*" unary term_ | "/" unary term_ | epsilon

unary ::= "-" unary | "!" unary | factor

factor ::= ("(" bool ")" | location | literal | "true" | "false" | call | "this" | tuple | array | range) factor_
factor_ ::= "." bool factor_ | epsilon

location ::= bool location_
location_ ::= "." bool location_ | epsilon

call ::= id "(" arg_list ")"

arg_list ::= bool ("," bool)* | epsilon

stmts ::= stmt*

stmt ::= decl | location "=" bool ";" | "{" stmts "}" | "if" "(" bool ")" stmt ("else" stmt)? | "while" "(" bool ")" stmt | "loop" stmt | "return" bool ";" | "break" ";" | "continue" ";" | "for" "(" id ":" [array | range] ")" stmt

tuple ::= "(" arg_list ")"

array ::= "[" arg_list "]"

literal ::= number | char | string

range ::= digits ".." digits | digits "..." digits | digits ".." digits ".." digits | digits "..." digits ".." digits

number ::= digits [("." digits)? ((["E"|"e"])? (["+"|"-"])? digits)? ("f")? | ("u")? (["H"|"h"|"L"|"l"])?]

digits ::= digit+

digit ::= ["0"-"9"]

letter ::= ["a"-"z"] | ["A"-"Z"]

id ::= letter (letter | digit)*

char ::= "_" [letter | digit | symbol | white] "_"

symbol ::= ["!"|"@"|"#"|"$"|"%"|"^"|"&"|"*"|"("|")"|"-"|"_"|"+"|"="|"["|"]"|"{"|"}"|";"|":"|"'"|","|"."|"<"|">"|"/"|"?"|"\\"|"|"|"~"]

white ::= [" "|"\t"|"\n"|"\r"]

string ::= "\"" char* "\""